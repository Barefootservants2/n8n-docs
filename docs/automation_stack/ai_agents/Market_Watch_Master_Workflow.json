{
  "name": "Market_Watch_Master_Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "0",
      "name": "Schedule"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "gauntlet_webhook",
              "value": "https://YOUR_N8N_HOST/webhook/query"
            }
          ],
          "number": [
            {
              "name": "daysLookback",
              "value": 2
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        320,
        0
      ],
      "id": "1",
      "name": "Config"
    },
    {
      "parameters": {
        "jsCode": "return [\n  { json: { feed: \"https://feeds.content.dowjones.io/public/rss/RSSMarketsMain\" } },\n  { json: { feed: \"https://www.barchart.com/news/rss/commodities\" } },\n  { json: { feed: \"https://www.barchart.com/news/rss/commodities/grain\" } },\n  { json: { feed: \"https://www.barchart.com/news/rss/commodities/livestock\" } },\n  { json: { feed: \"https://mecardo.com.au/feed/\" } },\n  { json: { feed: \"https://www.graincentral.com/markets/feed/\" } },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        0
      ],
      "id": "2",
      "name": "RSS Feeds"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        960,
        0
      ],
      "id": "3",
      "name": "Loop Feeds"
    },
    {
      "parameters": {
        "url": "={{ $json.feed }}",
        "options": {
          "ignoreSSL": false
        }
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        1280,
        0
      ],
      "id": "4",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $('RSS Read').first().json.pubDate }}",
              "rightValue": "={{ DateTime.now().minus({ days: $node['Config'].json.daysLookback }) }}",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1600,
        0
      ],
      "id": "5",
      "name": "If Recent"
    },
    {
      "parameters": {
        "numberInputs": 1
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1920,
        0
      ],
      "id": "6",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const seen=new Set();const out=[];\nfor (const it of $input.all()){const j=it.json;const link=j.link||j.guid||j.url||''; if(!link||seen.has(link)) continue;\nseen.add(link); out.push({json:{title:j.title||'',link,content:j.contentSnippet||j.content||'',pubDate:j.isoDate||j.pubDate||''}})}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        0
      ],
      "id": "7",
      "name": "Clean & Dedup"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2560,
        0
      ],
      "id": "8",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "messages": {
          "messageValues": [
            {
              "message": "# Objective\nCreate a concise market watch briefing focused on **NASDAQ, S&P 500, and Dow** plus actionable sector/commodity notes.\n\n## Steps\n1) Group headlines by macro/sectors.\n2) For each index (NASDAQ, S&P, Dow): two bullets (what moved + why).\n3) Provide actionable watchlist bullets (tickers, catalyst, window).\n4) Add risk flags (vol, earnings, Fed, geopolitics).\n\n## Output\n- **Index Briefing** (NASDAQ, S&P 500, Dow): 2 bullets each\n- **Sectors/Commodities**: 4\u20138 bullets\n- **Today/This Week**: checklist bullets\n- **Risk**: bullets"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2880,
        0
      ],
      "id": "9",
      "name": "Summarize"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2880,
        220
      ],
      "id": "10",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Config'].json.gauntlet_webhook }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"query\": \"Enhance for clarity. Add one-line What to watch at end.\\n\\n\" + $json.text }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3200,
        0
      ],
      "id": "11",
      "name": "Aiora Enhance (Gauntlet)"
    },
    {
      "parameters": {
        "jsCode": "const t=$input.first().json||$json; const body=t.refined||t.message||t.text||JSON.stringify(t);\nconst html=`<h2>Market Watch Briefing</h2><pre style=\"white-space:pre-wrap;font-family:Inter,system-ui,sans-serif;\">${body}</pre><p style=\"font-size:12px;color:#666;\">Generated ${new Date().toLocaleString()}</p>`;\nreturn [{json:{emailBodyHtml:html,emailBodyText:body}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3520,
        0
      ],
      "id": "12",
      "name": "Format Output"
    },
    {
      "parameters": {
        "sendTo": "you@example.com",
        "subject": "={{ $now.toFormat('MMMM dd') }} \u00b7 Market Watch Briefing",
        "message": "={{ $json.emailBodyHtml }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3840,
        0
      ],
      "id": "13",
      "name": "Gmail"
    },
    {
      "parameters": {
        "text": "={{ $json.emailBodyText }}",
        "additionalFields": {
          "appendAttribution": true
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3840,
        220
      ],
      "id": "14",
      "name": "Telegram"
    }
  ],
  "connections": {
    "Schedule": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "RSS Feeds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Feeds": {
      "main": [
        [
          {
            "node": "Loop Feeds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Feeds": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "If Recent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Recent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Clean & Dedup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean & Dedup": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Summarize",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Aiora Enhance (Gauntlet)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aiora Enhance (Gauntlet)": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Output": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "82e1edf4-4b18-4ab6-8627-e15919e43167",
  "meta": {
    "templateCredsSetupCompleted": false
  }
}